#!/bin/bash

# *** This has been auto-generated from README.md by /opt/chj/chjize/actions/install ***

set -eu
set -x

apt-get update
apt-get install -y git make gnupg
mkdir -p /opt/chj
cd /opt/chj
git clone https://github.com/pflanze/chjize.git
cd chjize/

gpg --import cj-key.asc
version=r$(git tag -l | grep ^r | sed s/^r// | LANG=C sort -rn | head -1)
git checkout -b local "$version"
tmptag=$(mktemp)
git tag -v "$version" > "$tmptag" 2>&1 || { cat "$tmptag"; false; }
cat "$tmptag"
# Check that the above command gives "Good signature", and (if warning) shows
#   my fingerprint (A54A1D7CA1F94C866AC81A1F0FA5B21104EDB072, feel 
#   free to google it) if you don't have a trust path to the key.
if grep -q WARNING "$tmptag"; then grep "A54A 1D7C A1F9 4C86 6AC8.*1A1F 0FA5 B211 04ED B072" "$tmptag"; fi

# You can also do the more paranoid verification of running the
#   script lines shown in the tag (the lines starting with a `$`),
#   and verifying that you get the same output as shown:
sumsSig=$(perl -we 'local $/; $a=<STDIN>; $a=~ s{.*\n\$[^\n]*sha256sum\n}{}s; print $a' < "$tmptag")
sumsLocal=$(git ls-files -z | xargs -0 --no-run-if-empty -s 129023 -n 129023 sha256sum)
if ! diff <(echo "$sumsSig") <(echo "$sumsLocal"); then echo "check failure"; false; fi

make -f targets.mk

set +x
echo -n 'Ready. '

cat <<'END'
Run:
    
    PATH=/opt/chj/chjize/bin:$PATH
    chjize -h

for the list of available targets (the same as shown
[below](#current-list-of-targets)). To e.g. only install my software
into `/opt/chj` (and dependences, see `targets.mk` or the
[graph](#graph-of-target-dependencies) below), run:

    chjize chj

Unlike Ansible, this caches which actions were already done, and is
thus more efficient when asking the same target repeatedly (even
across runs). If an action for some reason really should be re-run,
unlink the file with the same name as the target.

The `moduser` target, or `mod-user` script, sets up bash startup files
so that `PATH` is set so that `chjize` is found automatically.

Chjize may work with parallel builds (`chjize -j2` and higher
numbers), since we're now using wrappers around `apt-get` and `apt`
(in [bin/](bin/)) that use waiting locks.
END
