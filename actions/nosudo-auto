#!/bin/bash

#set -euo pipefail
set -eu
IFS=

set -x

# Still check first, since otherwise we would carry out actions
# *before* running `make -f targets.mk nosudo` (which does look at the
# same env var, but the actions would already have been done for no
# benefit).
if [ "${NOSUDO-}" = no ]; then
    exit 0
fi

if [ "$EUID" -ne 0 ]; then
    echo "$0: this must be run as root."
    exit 1
fi

do_nosudo () {
    set -eu
    make -f targets.mk nosudo
}
do_nosudo_force () {
    set -eu
    SUDO_FORCE_REMOVE=yes do_nosudo
}


01ok () {
    set +e
    "$@"
    [ $? -eq 0 -o $? -eq 1 ]
}

# Try to find the user that logged into the machine (pre sudo):

# # ps auxwwf
#
# root       579  0.0  0.4  15852  4880 ?        Ss   17:15   0:00 /usr/sbin/sshd -D
# root       656  0.0  0.4  16604  4860 ?        Ss   18:11   0:00  \_ sshd: admin [priv]
# admin      669  0.0  0.2  16604  2880 ?        S    18:11   0:00      \_ sshd: admin@pts/0
# admin      670  0.0  0.4   6552  4360 pts/0    Ss   18:11   0:00          \_ -bash
# root      4825  0.0  0.3  12004  3740 pts/0    S    22:54   0:00              \_ sudo su -
# root      4826  0.0  0.3  11548  3208 pts/0    S    22:54   0:00                  \_ su -
# root      4827  0.0  0.4   5032  4328 pts/0    S    22:54   0:00                      \_ -bash
# root      4860  0.0  0.2   7780  2776 pts/0    R+   22:57   0:00                          \_ ps auxwwf


passwd_field () {
    local passwd=$1
    local fieldindex=$2
    local - ; set +x
    set -eu
    local IFS
    IFS=:
    read -ra pw < <(printf '%s\n' "$passwd")
    printf '%q\n' "${pw[$fieldindex]}"
}

uid_passwd () {
    local uid=$1
    local - ; set +x
    set -eu
    getent passwd "$uid"
}

uid_name () { local uid=$1; local - ; set +x; set -eu; local passwd; passwd=$(uid_passwd "$uid"); passwd_field "$passwd" 0; }
uid_home () { local uid=$1; local - ; set +x; set -eu; local passwd; passwd=$(uid_passwd "$uid"); passwd_field "$passwd" 5; }

uid_authorizedkeysfile () {
    local uid=$1
    local - ; set +x
    set -eu
    local home
    home=$(uid_home "$uid")
    printf '%q\n' "$home/.ssh/authorized_keys"
}


procstatus_get () {
    local procstatus=$1
    local field=$2

    local - ; set +x
    set -eu
    printf '%s' "$procstatus" | FIELD=$field perl -wne \
      '/^\Q$ENV{FIELD}\E:\s*(.+)/ and push @vs, $1; 
       END { @vs == 1 or die "found ".@vs." values not 1"; print @vs, "\n" or die }'
}

pid_procstatus () {
    local pid=$1

    local - ; set +x
    set -eu
    cat "/proc/$pid/status"
}

pid_status_get () {
    local pid=$1
    local key=$2

    local - ; set +x
    set -eu
    local procstatus
    procstatus=$(pid_procstatus "$pid")
    procstatus_get "$procstatus" "$key"
}

pid_presudo_Uid () {
    local pid=$1

    local - ; set +x
    set -eu
    if [ "$pid" = 0 ]; then
        # sudo not found, return root user, ok?
        echo 0
    else
        local procstatus name ppid
        procstatus=$(pid_procstatus "$pid")
        name=$(procstatus_get "$procstatus" Name)
        ppid=$(procstatus_get "$procstatus" PPid)
        if [ "$name" = sudo ]; then
            pid_status_get "$ppid" Uid 
        else
            pid_presudo_Uid "$ppid"
        fi
    fi
}

pid_is_ssh () {
    local pid=$1

    local - ; set +x
    set -eu
    if [ "$pid" = 0 ]; then
        # ssh not found
        echo 0
    else
        local procstatus name ppid
        procstatus=$(pid_procstatus "$pid")
        name=$(procstatus_get "$procstatus" Name)
        if [ "$name" = sshd ]; then
            echo 1
        else
            ppid=$(procstatus_get "$procstatus" PPid)
            pid_is_ssh "$ppid"
        fi
    fi
}


presudoUid=$(pid_presudo_Uid "$$")
presudouid=$(echo "$presudoUid" | perl -wne '/^(\d+)/ or die; print $1')

if [ "$presudouid" = 0 ]; then
    # sudo was not used to get root, thus there already must be a way
    # to get at it without sudo, thus it's safe to remove sudo
    do_nosudo_force
else
    # first make sure user is accessible via ssh
    is_ssh=$(pid_is_ssh "$$")
    if [ "$is_ssh" = 1 ]; then
        # We have an ssh login to non-root that used sudo to get root.
        # Ensure that ssh is also possible to root by the same keys
        # that have access to $presudouid.
        from=$(uid_authorizedkeysfile "$presudouid")
        to=$(uid_authorizedkeysfile 0)
        if [ "$from" = "$to" ]; then
            echo "$0: odd, should not be identical, BUG?: '$from', '$to'"
            # Well, unless both users were really configured to have
            # the same dir, but that would be odd since
            # insecure/voiding sudo anyway.
            #do_nosudo_force # really?
            exit 1
        else
            cleaned=$(mktemp)
            # Remove entries from AWS
            01ok grep -v 'Please login as the user' < "$to" > "$cleaned"
            # Add entries from $from which are not in $cleaned
            tmp=$(mktemp)
            {
                cat "$from"
                echo
                cat "$cleaned"
                echo
            } > "$tmp"
            tmp2=$(mktemp)
            LANG=C sort -u < "$tmp" > "$tmp2"
            new=$(mktemp -d -p "$(dirname "$to")")
            egrep -v '^$' < "$tmp2" > "$new"
            chmod go-rwx "$new"
            mv -f "$new" "$to"
            # And finally...
            do_nosudo_force
        fi
    else
        # Still try to remove sudo, this case is left to manual
        # enforcement via the env var.
        do_nosudo
    fi
fi

