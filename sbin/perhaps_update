#!/usr/bin/perl -w

use strict; use warnings FATAL => 'uninitialized';

my $maxage= 60*60*24;  # seconds


$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname stamp_path command [ arguments ]

  Checks if stamp_path exists and is newer than $maxage seconds,
  otherwise it runs command with the given arguments, then
  creates/updates the stamp.
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless @ARGV >= 2;

my ($stamp_path, @cmd)= @ARGV;

# copy from Chj::xperlfunc
use Carp;
sub xsystem_safe {
    @_>0 or croak "xsystem_safe: missing arguments";
    no warnings;
    (system { $_[0] } @_)>=0
      or croak "xsystem_safe: could not start command '$_[0]': $!";
    $?
}
# /copy

sub update {
    my $exitcode= xsystem_safe(@cmd);
    if ($exitcode == 0) {
	open my $o, ">", $stamp_path
	  or die "could not create stamp '$stamp_path': $!";
	close $o
	  or die $!;
    } else {
	die "$myname: command exited with code $exitcode"
    }
}


if (defined (my $m= -M $stamp_path)) {
    if (($m * 60*60*24) < $maxage) {
	# OK
    } else {
	update
    }
} else {
    update
}

