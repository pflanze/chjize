#!/usr/bin/perl -w

# Thu  4 Mar 21:49:53 GMT 2021
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;
use warnings FATAL => 'uninitialized';
use experimental "signatures";

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname pattern [ maybe_ge_gt mintagname ]

  `pattern` is a Perl regular expression.

  If `maybe_ge_gt` and `mintagname` are given (are not the empty
  string or nothign), then `maybe_ge_gt` must be `>` or `>=`, and
  `mintagname` the tag name of the one to compare against.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless (@ARGV >= 1 and @ARGV <= 3);

my ($pattern, $maybe_ge_gt, $mintagname) = @ARGV;
$mintagname //= "";

my @v0;
{
    open my $in, "-|", "git", "tag", "-l"
        or die "git tag -l: $? $!";

    while(<$in>) {
        chomp;
        if (/$pattern/) {
              my $version = $1
                // die "pattern /$pattern/ does not capture anything, please add a capture group (parens)";
              push @v0, [ $_, $version ];
          }
    }

    close $in or die "git tag -l: $? $!";
}


@v0 or die "no tags matching /$pattern/ found";


sub die_compare ($a, $b) {
    die "can't compare ".$a->string." with ".$b->string
        .", use regex to constrain tags";
}

package Chjize::DottedVersion {
    sub string ($self) {
        "DottedVersion(".join(".", @$self).")"
    }
    sub vcmp ($a, $b) {
        $b->isa("Chjize::DottedVersion") or main::die_compare $a, $b;
        for (my $i=0; 1; $i++) {
            if (defined (my $A = $$a[$i])) {
                if (defined (my $B = $$b[$i])) {
                    my $c= $A <=> $B;
                    return $c if $c;
                } else {
                    return 1
                }
            } else {
                if (defined (my $B = $$b[$i])) {
                    return -1
                } else {
                    return 0
                }
            }
        }
    }
}

package Chjize::DecimalVersion {
    sub string ($self) {
        my ($d, $e)= @$self;
        my $str= length($e) ? "$d.$e" : $d;
        "DecimalVersion($str)"
    }
    sub vcmp ($a, $b) {
        $b->isa("Chjize::DecimalVersion") or main::die_compare $a, $b;
        $$a[0] <=> $$b[0] or $$a[1] cmp $$b[1]
    }
}

sub vparse ($v) {
    if ($v=~ /^\d+(?:\.\d+){2,}$/s) {
        bless [ split /\./, $v ], "Chjize::DottedVersion"
    } else {
        my ($pre,$post)= $v=~ /^(\d+)(?:\.(.*))?$/s
          or die "invalid version number, does not start with digits and optionally a dot and string: '$v'";
        bless [$pre, $post//""], "Chjize::DecimalVersion"
    }
}

sub vcmp($a, $b) {
    my $A= vparse $a;
    my $B= vparse $b;
    $A->vcmp($B)
}

# main> vcmp "1.2.3", "1.2.3"
# $VAR1 = 0;
# main> vcmp "1.2.3", "1.2.4"
# $VAR1 = -1;
# main> "1.2.3" cmp "1.2.4"
# $VAR1 = -1;
# main> vcmp "1.2.3", "1.2.1"
# $VAR1 = 1;
# main> vcmp "1.1.3", "1.2.1"
# $VAR1 = -1;
# main> vcmp "1.1.3", "1.10.1"
# $VAR1 = -1;
# main> vcmp "1.09.3", "1.10.1"
# $VAR1 = -1;
# main> vcmp "1.09.3", "1.1.1"
# $VAR1 = 1;
#use FP::Repl;repl; exit;

my @v= do {
    if ($maybe_ge_gt) {
        my ($mintagversion)= $mintagname=~ /$pattern/
            or die "mintagname \"$mintagname\" does not match pattern \"$pattern\"";
        my $mincmpok= $maybe_ge_gt eq ">" ? 1 
                    : $maybe_ge_gt eq ">=" ? 0
                    : die "invalid maybe_ge_gt value: '$maybe_ge_gt'";
        grep { vcmp($$_[1], $mintagversion) >= $mincmpok } @v0
    } else {
        @v0
    }
};

@v or die ( $maybe_ge_gt ? "no tags $maybe_ge_gt $mintagname found"
            : "no tags found");

print((sort { vcmp $$a[1], $$b[1] } @v)[-1][0]) or die $!;

