#!/bin/bash

set -euo pipefail
IFS=

source /opt/chj/chjize/lib/chj-env.bash

usage () {
    echo "usage: $0 [-v] [-p pattern] ['>'|'>=' mintagname]"
    echo
    echo "  Check out the highest-numbered release tag."
    echo 
    echo "  If '>' or '>=' and mintagname are given, die unless a tag with"
    echo "  higher version number is found."
    echo "  Since the release tag name itself is part of the git tag signature,"
    echo "  this is cryptographically safe (it's impossible to give tags created"
    echo "  lower than mintagname a new tag name that's higher as it would make"
    echo "  the signature check fail.)"
    echo
    echo "  Options:"
    echo "     -v           run verify-sig and git-tag-hashed (default)"
    echo "     -V           do not run verify-sig nor git-tag-hashed"
    echo "     -p pattern   pattern to use with perl for tag selection,"
    echo "                    must capture the version number, of which"
    echo "                    the part before an optional dot is sorted"
    echo "                    numerically, the part after lexically;"
    echo "                    default: '$pattern'"
    echo
    exit 1
}

do_verify=yes
pattern='^[rv](\d+(?:\.\d+)*)$'
maybe_ge_gt=
maybe_mintagname=

while [ "${#@}" -gt 0 ]; do
    case "$1" in
        -v)
        shift
        do_verify=yes
        ;;
        -V)
        shift
        do_verify=no
        ;;
        -p)
        shift
        pattern="$1"
        shift
        ;;
        '>'|'>=')
        maybe_ge_gt="$1"
        shift
        maybe_mintagname="$1"
        shift
        ;;
        *)
        usage
        ;;
    esac
done


ver=$(git tag -l | /opt/chj/chjize/bin/latest-release "$pattern" "$maybe_ge_gt" "$maybe_mintagname")

#echo "do_verify=$do_verify, pattern='$pattern'"
#echo "ver='$ver'";

git checkout master || true  # so that branch -D can work below

# Could create a branch, but then how to handle existing ones?:
#   git branch -D _"$ver" || true
#   git checkout -b _"$ver" "$ver"
#
# Or, just check out without a name:
#git checkout "$ver"
#
# Or, generate random name:
randomid=`(base64 < /dev/urandom || true) | head -c 20 | tr /+ XX`
git checkout -b "${ver}_${randomid}" "$ver"

if [[ $do_verify = yes ]]; then
    verify-sig --require-accept-keys "$ver"
    git-tag-hashed "$ver"
fi

